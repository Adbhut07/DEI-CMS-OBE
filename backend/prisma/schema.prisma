generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int          @id @default(autoincrement())
  name             String
  email            String       @unique
  password         String
  role             Role
  profileDetails   Json?
  enrollments      Enrollment[]
  uploadedMarks    Marks[]      @relation("UploadedMarks")
  marksReceived    Marks[]      @relation("StudentMarks")
  assignedSubjects Subject[]    @relation("FacultySubjects")
  createdCourses   Course[]     @relation("CreatedCourses")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}
 
model Course {
  id              Int               @id @default(autoincrement())
  courseName      String
  createdBy   User     @relation(fields: [createdById], references: [id], name: "CreatedCourses")
  createdById Int
  semesters       Semester[]
  batches         Batch[]
  programOutcomes ProgramOutcome[]  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}


model Batch {
  id              Int              @id @default(autoincrement())
  batchYear       Int              // Stores admission or graduation year
  course          Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId        Int
  students        Enrollment[]
  programOutcomes ProgramOutcome[] // ✅ Add this
  coAttainments   CO_Attainment[]  // ✅ Add this
  poAttainments   PO_Attainment[]  // ✅ Add this
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}


model Semester {
  id          Int          @id @default(autoincrement())
  name        String // Example: "Semester 1", "Semester 2"
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    Int
  subjects    Subject[]
  // enrollments Enrollment[]
  // exams       Exam[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Subject {
  id             Int             @id @default(autoincrement())
  subjectName    String
  subjectCode    String
  semester       Semester        @relation(fields: [semesterId], references: [id])
  semesterId     Int
  faculty        User?           @relation("FacultySubjects", fields: [facultyId], references: [id])
  facultyId      Int?
  units          Unit[]
  exams          Exam[]
  coAttainments  CO_Attainment[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model ProgramOutcome {
  id          Int       @id @default(autoincrement())
  course      Course    @relation(fields: [courseId], references: [id])
  courseId    Int
  batch       Batch?    @relation(fields: [batchId], references: [id]) // New relation
  batchId     Int?
  description String    // Example: "Ability to apply mathematics in engineering"
  coMappings  CO_PO_Mapping[]
  attainment  Float     @default(0.0) // Auto-calculated
  poAttainments PO_Attainment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Unit {
  id             Int             @id @default(autoincrement())
  unitNumber     Int
  description    String?
  subject        Subject         @relation(fields: [subjectId], references: [id])
  subjectId      Int
  coMappings     CO_PO_Mapping[]
  questions      Question[]
  attainment     Float    @default(0.0) // Auto-calculated
  coAttainments  CO_Attainment[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model CO_PO_Mapping {
  id           Int            @id @default(autoincrement())
  courseOutcome Unit         @relation(fields: [coId], references: [id]) // CO = Unit
  coId         Int
  programOutcome ProgramOutcome @relation(fields: [poId], references: [id])
  poId         Int
  weightage    Float           // Weightage of CO in PO (e.g., 0.3 means 30%)

  @@unique([coId, poId])
}

model CO_Attainment {
  id          Int       @id @default(autoincrement())
  co          Unit      @relation(fields: [coId], references: [id])
  coId        Int
  batch       Batch     @relation(fields: [batchId], references: [id])
  batchId     Int
  subject     Subject   @relation(fields: [subjectId], references: [id])
  subjectId   Int
  attainment  Float     @default(0.0) // Calculated per batch
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([coId, batchId, subjectId]) // Prevent duplicate entries
}

model PO_Attainment {
  id          Int       @id @default(autoincrement())
  po          ProgramOutcome @relation(fields: [poId], references: [id])
  poId        Int
  batch       Batch     @relation(fields: [batchId], references: [id])
  batchId     Int
  attainment  Float     @default(0.0) // Calculated per batch
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([poId, batchId]) // Prevent duplicate entries
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  student    User     @relation(fields: [studentId], references: [id])
  studentId  Int
  batch      Batch    @relation(fields: [batchId], references: [id], onDelete: Cascade)
  batchId    Int
  rollNo     String?
  isActive   Boolean  @default(true) 
  createdAt  DateTime @default(now())

  @@unique([batchId, rollNo]) 
}



model Exam {
  id         Int        @id @default(autoincrement())
  examType   ExamType
  subject    Subject    @relation(fields: [subjectId], references: [id])
  subjectId  Int
  questions  Question[]
  marks      Marks[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt 

  @@unique([examType, subjectId])
}

model Question {
  id             Int      @id @default(autoincrement())
  questionText   String
  marksAllocated Int
  exam           Exam     @relation(fields: [examId], references: [id])
  examId         Int
  unit           Unit     @relation(fields: [unitId], references: [id])
  unitId         Int
  marks          Marks[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Marks {
  id            Int      @id @default(autoincrement())
  student       User     @relation("StudentMarks", fields: [studentId], references: [id])
  studentId     Int
  question      Question @relation(fields: [questionId], references: [id])
  questionId    Int
  marksObtained Int
  exam         Exam     @relation(fields: [examId], references: [id])
  examId       Int
  uploadedBy   User     @relation("UploadedMarks", fields: [uploadedById], references: [id])
  uploadedById Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([studentId, questionId, examId])
}

enum Role {
  Student
  Faculty
  HOD
  Dean
  Admin
}

enum ExamType {
  CT1   // Class Test 1
  CT2   // Class Test 2
  DHA   // Daily Home Assignment
  CA    // Class Assessment
  AA    // Additional Assessment
  ATT   // Attendance-Based Marks
  ESE   // End Semester Exam **
}

