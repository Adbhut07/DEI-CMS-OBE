generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int          @id @default(autoincrement())
  name             String
  email            String       @unique
  password         String
  role             Role
  profileDetails   Json?
  enrollments      Enrollment[]
  uploadedMarks    Marks[]      @relation("UploadedMarks")
  marksReceived    Marks[]      @relation("StudentMarks")
  assignedSubjects Subject[]    @relation("FacultySubjects")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  Course           Course[]
}

model Course {
  id          Int          @id @default(autoincrement())
  courseName  String
  semesters   Semester[]
  createdBy   User         @relation(fields: [createdById], references: [id])
  createdById Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Enrollment  Enrollment[]
}

model Semester {
  id          Int          @id @default(autoincrement())
  name        String // Example: "Semester 1", "Semester 2"
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    Int
  subjects    Subject[]
  enrollments Enrollment[]
  exams       Exam[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Subject {
  id             Int             @id @default(autoincrement())
  subjectName    String
  semester       Semester        @relation(fields: [semesterId], references: [id])
  semesterId     Int
  faculty        User?           @relation("FacultySubjects", fields: [facultyId], references: [id])
  facultyId      Int?
  units          Unit[]
  exams          Exam[]
  courseOutcomes CourseOutcome[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Unit {
  id             Int             @id @default(autoincrement())
  unitNumber     Int
  description    String?
  subject        Subject         @relation(fields: [subjectId], references: [id])
  subjectId      Int
  courseOutcomes CourseOutcome[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Question       Question[]
}

model CourseOutcome {
  id          Int      @id @default(autoincrement())
  description String
  unit        Unit     @relation(fields: [unitId], references: [id])
  unitId      Int
  attainment  Float    @default(0.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Subject     Subject? @relation(fields: [subjectId], references: [id])
  subjectId   Int?
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  student    User     @relation(fields: [studentId], references: [id])
  studentId  Int
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId   Int
  semester   Semester @relation(fields: [semesterId], references: [id])
  semesterId Int
  createdAt  DateTime @default(now())
}

model Exam {
  id         Int        @id @default(autoincrement())
  examType   ExamType
  subject    Subject    @relation(fields: [subjectId], references: [id])
  subjectId  Int
  semester   Semester   @relation(fields: [semesterId], references: [id])
  semesterId Int
  questions  Question[]
  marks      Marks[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt 

  @@unique([examType, subjectId, semesterId])
}

model Question {
  id             Int      @id @default(autoincrement())
  questionText   String
  marksAllocated Int
  exam           Exam     @relation(fields: [examId], references: [id])
  examId         Int
  unit           Unit     @relation(fields: [unitId], references: [id])
  unitId         Int
  marks          Marks[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Marks {
  id            Int      @id @default(autoincrement())
  student       User     @relation("StudentMarks", fields: [studentId], references: [id])
  studentId     Int
  question      Question @relation(fields: [questionId], references: [id])
  questionId    Int
  marksObtained Int
  examId      Int
  exam        Exam    @relation(fields: [examId], references: [id])
  uploadedBy    User     @relation("UploadedMarks", fields: [uploadedById], references: [id])
  uploadedById  Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([studentId, questionId, examId])
}

enum Role {
  Student
  Faculty
  HOD
  Dean
  Admin
}

enum ExamType {
  CT1
  CT2
  DHA
  CA
}
