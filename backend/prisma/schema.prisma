generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  name            String
  email           String          @unique
  password        String
  role            Role
  profileDetails  Json?
  enrollments     Enrollment[]
  uploadedStandardMarks StandardExamMarks[] @relation("UploadedStandardMarks")
  uploadedInternalMarks InternalAssessmentMarks[] @relation("UploadedInternalMarks")
  standardMarksReceived StandardExamMarks[] @relation("StudentStandardMarks")
  internalMarksReceived InternalAssessmentMarks[] @relation("StudentInternalMarks")
  facultySubjects CourseSubject[] @relation("FacultySubjects")
  createdCourses  Course[]        @relation("CreatedCourses")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Course {
  id              Int              @id @default(autoincrement())
  courseName      String
  createdBy       User             @relation(fields: [createdById], references: [id], name: "CreatedCourses")
  createdById     Int
  batches         Batch[]
  programOutcomes ProgramOutcome[]
  subjects        CourseSubject[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model CourseSubject {
  id        Int     @id @default(autoincrement())
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId Int
  semester  Int 
  faculty   User?   @relation("FacultySubjects", fields: [facultyId], references: [id])
  facultyId Int?
  batch     Batch   @relation(fields: [batchId], references: [id], onDelete: Cascade)
  batchId   Int

  @@unique([courseId, subjectId, semester, batchId])
}

model Batch {
  id              Int              @id @default(autoincrement())
  batchYear       Int 
  course          Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId        Int
  students        Enrollment[]
  programOutcomes ProgramOutcome[]
  coAttainments   CO_Attainment[]
  poAttainments   PO_Attainment[]
  courseSubjects  CourseSubject[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Subject {
  id             Int             @id @default(autoincrement())
  subjectName    String
  subjectCode    String          @unique
  units          Unit[]
  exams          Exam[]
  coAttainments  CO_Attainment[]
  standardMarks  StandardExamMarks[]
  internalMarks  InternalAssessmentMarks[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  courseMappings CourseSubject[]
}

model ProgramOutcome {
  id            Int             @id @default(autoincrement())
  course        Course          @relation(fields: [courseId], references: [id])
  courseId      Int
  batch         Batch           @relation(fields: [batchId], references: [id])
  batchId       Int
  description   String
  coMappings    CO_PO_Mapping[]
  attainment    Float           @default(0.0)
  poAttainments PO_Attainment[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Unit {
  id            Int             @id @default(autoincrement())
  unitNumber    Int
  description   String?
  subject       Subject         @relation(fields: [subjectId], references: [id])
  subjectId     Int
  coMappings    CO_PO_Mapping[]
  questions     Question[]
  attainment    Float           @default(0.0)
  coAttainments CO_Attainment[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model CO_PO_Mapping {
  id             Int            @id @default(autoincrement())
  courseOutcome  Unit           @relation(fields: [coId], references: [id])
  coId           Int
  programOutcome ProgramOutcome @relation(fields: [poId], references: [id])
  poId           Int
  weightage      Float

  @@unique([coId, poId])
}

model CO_Attainment {
  id         Int      @id @default(autoincrement())
  co         Unit     @relation(fields: [coId], references: [id])
  coId       Int
  batch      Batch    @relation(fields: [batchId], references: [id])
  batchId    Int
  subject    Subject  @relation(fields: [subjectId], references: [id])
  subjectId  Int
  attainment Float    @default(0.0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([coId, batchId, subjectId])
}

model PO_Attainment {
  id         Int            @id @default(autoincrement())
  po         ProgramOutcome @relation(fields: [poId], references: [id])
  poId       Int
  batch      Batch          @relation(fields: [batchId], references: [id])
  batchId    Int
  attainment Float          @default(0.0)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([poId, batchId])
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  student   User     @relation(fields: [studentId], references: [id])
  studentId Int
  batch     Batch    @relation(fields: [batchId], references: [id], onDelete: Cascade)
  batchId   Int
  rollNo    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([batchId, rollNo])
}

model Exam {
  id             Int                   @id @default(autoincrement())
  examType       ExamType
  subject        Subject               @relation(fields: [subjectId], references: [id])
  subjectId      Int
  marksAllocated Int?
  questions      Question[]
  standardMarks  StandardExamMarks[]
  internalMarks  InternalAssessmentMarks[]
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  @@unique([examType, subjectId])
}

model Question {
  id             Int                @id @default(autoincrement())
  questionText   String
  marksAllocated Int
  exam           Exam               @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId         Int
  unit           Unit               @relation(fields: [unitId], references: [id])
  unitId         Int
  marks          QuestionMark[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

// New model for question-specific marks (CT1, CT2, CA, ESE)
model QuestionMark {
  id             Int       @id @default(autoincrement())
  marksObtained  Int
  standardExamMark StandardExamMarks @relation(fields: [standardExamMarkId], references: [id], onDelete: Cascade)
  standardExamMarkId Int
  question        Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId      Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([standardExamMarkId, questionId])
}

// Standard exam marks (CT1, CT2, CA, ESE)
model StandardExamMarks {
  id             Int           @id @default(autoincrement())
  student        User          @relation("StudentStandardMarks", fields: [studentId], references: [id])
  studentId      Int
  exam           Exam          @relation(fields: [examId], references: [id])
  examId         Int
  subject        Subject       @relation(fields: [subjectId], references: [id])
  subjectId      Int
  totalMarks     Int
  questionMarks  QuestionMark[]
  uploadedBy     User          @relation("UploadedStandardMarks", fields: [uploadedById], references: [id])
  uploadedById   Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([studentId, examId])
}

// Internal assessment marks (DHA, AA, ATT)
model InternalAssessmentMarks {
  id             Int       @id @default(autoincrement())
  student        User      @relation("StudentInternalMarks", fields: [studentId], references: [id])
  studentId      Int
  exam           Exam      @relation(fields: [examId], references: [id])
  examId         Int
  subject        Subject   @relation(fields: [subjectId], references: [id])
  subjectId      Int
  marksObtained  Int
  uploadedBy     User      @relation("UploadedInternalMarks", fields: [uploadedById], references: [id])
  uploadedById   Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([studentId, examId])
}

enum Role {
  Student
  Faculty
  HOD
  Dean
  Admin
}

enum ExamType {
  CT1 // Class Test 1
  CT2 // Class Test 2
  DHA // Daily Home Assignment
  CA // Class Assessment
  AA // Additional Assessment
  ATT // Attendance-Based Marks
  ESE // End Semester Exam **
}